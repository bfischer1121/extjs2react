import _ from 'lodash'
import recast from 'recast'
import { visit } from 'ast-types'
import fs from 'fs-extra'
import SourceFile from './SourceFile'

import {
  Ast,
  getConfig,
  readFile,
  writeFile,
  isDirectory,
  getFilesRecursively,
  getAbsolutePath,
  asyncForEach,
  copySourceFileToTargetDir,
  getPathInTargetDirForSource,
  logError
} from './Util'

export default class Codebase{
  sourceFiles = []
  unparseable = []
  aliases     = {}
  classes     = {}
  classRe     = []
  words       = []

  static async factory(config){
    let codebase = new this(config)
    await codebase.addSourceFiles()
    return codebase
  }

  constructor({ sourceDir, targetDir, parentCodebase, words = [] }){
    this.sourceDir      = sourceDir
    this.targetDir      = targetDir
    this.parentCodebase = parentCodebase
    this.customWords    = words

    this.addWords(words)

    if(this.parentCodebase){
      this._addWordsFromClassNames(Object.values(this.parentCodebase.aliases))
    }
  }

  getClassNameForAlias(alias){
    return this.aliases[alias] || (this.parentCodebase ? this.parentCodebase.getClassNameForAlias(alias) : null) || null
  }

  getClassForClassName(className){
    return this.classes[className] || (this.parentCodebase ? this.parentCodebase.getClassForClassName(className) : null) || null
  }

  async getAllClassNames(){
    let classNames = Object.keys(this.classes).map(className => this.classes[className].getExportName())
    return _.uniq(classNames).sort((n1, n2) => n1.localeCompare(n2))
  }

  async transpile(){
    await this.prepareTargetDirectory()
    this.unparseable.forEach(file => copySourceFileToTargetDir(file))

    await asyncForEach(this.sourceFiles, async sourceFile => {
      this.saveSourceFile(sourceFile, sourceFile.transpile())
      //sourceFile.missingFiles.forEach(className => logError(`Unknown file for class: ${className}`))
    })
  }

  async addSourceFiles(){
    this.sourceFiles = await this.loadSourceFiles()

    let classes = this.sourceFiles.reduce((classes, sourceFile) => ([...classes, ...sourceFile.classes]), [])

    classes.forEach(cls => {
      cls.classAliases.forEach(alias => {
        if(this.aliases[alias]){
          logError(`Duplicate alias: ${alias}`)
        }

        this.aliases[alias] = cls.className
      })

      if(this.classes[cls.className]){
        logError(`Duplicate class: ${cls.className}`)
      }

      this.classes[cls.className] = cls
      this.classRe.push(cls.getFileSearchRegExp())
    })

    classes.forEach(cls => {
      if(cls.parentClassName){
        cls.parentClass = this.getClassForClassName(cls.parentClassName)
      }
    })

    this._addWordsFromClassNames(classes.map(cls => cls.className))
    await asyncForEach(this.sourceFiles, async sourceFile => await sourceFile.initImports())
  }

  loadSourceFiles(){
    this._loadSourceFiles = this._loadSourceFiles || this.doLoadSourceFiles()
    return this._loadSourceFiles
  }

  async doLoadSourceFiles(){
    let files       = getFilesRecursively(this.sourceDir),
        unparseable = files.filter(file => !file.endsWith('.js')),
        js          = files.filter(file => file.endsWith('.js')), //.filter(file => file.endsWith('NonClinical.js')),
        sourceFiles = []

    await asyncForEach(js, async filePath => {
      let sourceFile = await SourceFile.factory({
        codebase       : this,
        codeFilePath   : filePath,
        importFilePath : filePath,
        source         : await readFile(filePath)
      })

      sourceFile.parseable ? sourceFiles.push(sourceFile) : unparseable.push(filePath)
    })

    this.unparseable = unparseable

    return sourceFiles
  }

  async prepareTargetDirectory(){
    let infoPath  = getAbsolutePath(this.targetDir, 'extjs2react.json'),
        generator = null

    try{
      generator = fs.readJsonSync(infoPath).generator
    }
    catch(e){}

    if(isDirectory(this.targetDir) && generator !== 'extjs2react'){
      throw 'Cannot clear or write to a directory not generated by extjs2react'
    }

    await fs.emptyDir(this.targetDir)
    await fs.writeFile(infoPath, JSON.stringify({ generator: 'extjs2react' }, null, 2))
  }

  saveSourceFile(sourceFile, code){
    writeFile(getPathInTargetDirForSource(sourceFile.codeFilePath), code)
  }

  _addWordsFromClassNames(classNames){
    let classParts = _.flatten(classNames.map(className => className.split('.'))),
        classWords = _.flatten(classParts.map(classPart => classPart.split(/(?=[A-Z])/)))

    this.addWords(classWords.filter(word => word.length > 3).map(word => _.capitalize(word)))
  }

  addWords(words){
    words = _.uniq([...(this.words.map(w => w[0])), ...words]).sort((w1, w2) => {
      let diff = w1.length - w2.length
      return diff === 0 ? (this.customWords.includes(w1) ? 1 : -1) : diff
    })

    this.words = words.map(word => [word, new RegExp(word, 'gi')])
  }
}