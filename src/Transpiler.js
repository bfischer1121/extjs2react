import path from 'path'
import fs from 'fs-extra'
import _ from 'lodash'
import Source from './Source'

import {
  isDirectory,
  getFilesRecursively,
  getRelativePath,
  getAbsolutePath,
  readFile,
  asyncForEach,
  getConfig,
  copySourceFileToTargetDir
} from './Util'

export default class Transpiler{
  constructor(sourceDir){
    this.sourceDir = sourceDir
  }

  async run(){
    let files       = getFilesRecursively(this.sourceDir),
        unparseable = files.filter(file => !file.endsWith('.js')),
        js          = files.filter(file => file.endsWith('.js'))

    this.sources = []

    await asyncForEach(js, async file => {
      let source = new Source(file, await readFile(file))
      source.parseable ? this.sources.push(source) : unparseable.push(file)
    })

    await this.prepareTargetDirectory()
    unparseable.forEach(copySourceFileToTargetDir)

    await this.addImports()
  }

  async prepareTargetDirectory(){
    let targetDir = getConfig().targetDir,
        infoPath  = getAbsolutePath(targetDir, 'extjs2react.json'),
        generator = null

    try{
      generator = fs.readJsonSync(infoPath).generator
    }
    catch(e){}

    if(isDirectory(targetDir) && generator !== 'extjs2react'){
      throw 'Cannot clear or write to a directory not generated by extjs2react'
    }

    await fs.emptyDir(targetDir)
    await fs.writeFile(infoPath, JSON.stringify({ generator: 'extjs2react' }, null, 2))
  }

  async addImports(){
    let classFiles   = {},
        classRe      = [],
        missingFiles = []

    this.sources.forEach(source => {
      source.getClassNames().forEach(className => {
        classFiles[className] = source.filePath
        classRe.push(Source.getClassRe(className))
      })
    })

    await asyncForEach(this.sources, async source => {
      let classes    = source.getClassesUsed(classRe).filter(cls => !cls.startsWith('Ext.')),
          oldImports = source.getImportedFiles(),
          newImports = _.uniq(classes.filter(cls => classFiles[cls]).map(cls => getRelativePath(source.filePath, classFiles[cls])).map(i => i.replace(/\.js$/, '')))

      missingFiles.push(...classes.filter(cls => !classFiles[cls]))

      let uniqOld = _.difference(oldImports, newImports)

      await source.addImports(newImports)
      source.save()
    })

    missingFiles.forEach(className => console.error(`[Error] Unknown file for class: ${className}`))
  }
}