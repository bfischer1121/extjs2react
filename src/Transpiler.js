import path from 'path'
import fs from 'fs-extra'
import _ from 'lodash'
import { isDirectory, getFilesRecursively, getRelativePath, getAbsolutePath, asyncMap, asyncForEach, getConfig } from './Util'
import Source from './Source'

export default class Transpiler{
  constructor(sourceDir){
    this.sourceDir = sourceDir
  }

  async run(){
    let js = getFilesRecursively(this.sourceDir).filter(file => file.endsWith('.js')) //.filter(f => f.includes('NonClinical.js'))

    this.sources = (await asyncMap(js, async file => Source.fromFile(file))).filter(source => !!source)

    await this.prepareTargetDirectory()

    let goodCount = 0,
        badCount = 0

    /*this.sources.forEach(source => {
      if(source.checkRecast()){
        goodCount++
      }
      else{
        badCount++
        console.log(source.filePath)
      }

      console.log(`good: ${goodCount} bad: ${badCount}`)
    })*/
    //console.log(this.sources[0].ast)

    //let code = this.sources[0].code

    //console.log(code)
    await this.addImports()
  }

  async prepareTargetDirectory(){
    let targetDir = getConfig().targetDir,
        infoPath  = getAbsolutePath(targetDir, 'info.json'),
        source    = null

    try{
      source = fs.readJsonSync(infoPath).source
    }
    catch(e){}

    if(isDirectory(targetDir) && source !== 'extjs2react'){
      throw 'Cannot clear or write to a directory not generated by extjs2react'
    }

    await fs.emptyDir(targetDir)
    await fs.writeFile(infoPath, JSON.stringify({ source: 'extjs2react' }, null, 2))
  }

  async addImports(){
    let classFiles   = {},
        classRe      = [],
        missingFiles = []

    this.sources.forEach(source => {
      source.getClassNames().forEach(className => {
        classFiles[className] = source.filePath
        classRe.push(Source.getClassRe(className))
      })
    })

    await asyncForEach(this.sources, async source => {
      let classes    = source.getClassesUsed(classRe).filter(cls => !cls.startsWith('Ext.')),
          oldImports = source.getImportedFiles(),
          newImports = _.uniq(classes.filter(cls => classFiles[cls]).map(cls => getRelativePath(source.filePath, classFiles[cls])).map(i => i.replace(/\.js$/, '')))

      missingFiles.push(...classes.filter(cls => !classFiles[cls]))

      let uniqOld = _.difference(oldImports, newImports)

      await source.addImports(newImports)
    })

    missingFiles.forEach(className => console.error(`[Error] Unknown file for class: ${className}`))
  }
}